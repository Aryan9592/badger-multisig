// SPDX-License-Identifier: GPL-3.0+
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;
pragma experimental ABIEncoderV2;

interface IFeederPool {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event BassetsMigrated(address[] bAssets, address newIntegrator);
    event CacheSizeChanged(uint256 cacheSize);
    event FeesChanged(uint256 swapFee, uint256 redemptionFee, uint256 govFee);
    event Minted(
        address indexed minter,
        address recipient,
        uint256 output,
        address input,
        uint256 inputQuantity
    );
    event MintedMulti(
        address indexed minter,
        address recipient,
        uint256 output,
        address[] inputs,
        uint256[] inputQuantities
    );
    event Paused(address account);
    event Redeemed(
        address indexed redeemer,
        address recipient,
        uint256 mAssetQuantity,
        address output,
        uint256 outputQuantity,
        uint256 scaledFee
    );
    event RedeemedMulti(
        address indexed redeemer,
        address recipient,
        uint256 mAssetQuantity,
        address[] outputs,
        uint256[] outputQuantity,
        uint256 scaledFee
    );
    event StartRampA(
        uint256 currentA,
        uint256 targetA,
        uint256 startTime,
        uint256 rampEndTime
    );
    event StopRampA(uint256 currentA, uint256 time);
    event Swapped(
        address indexed swapper,
        address input,
        address output,
        uint256 outputAmount,
        uint256 fee,
        address recipient
    );
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Unpaused(address account);
    event WeightLimitsChanged(uint128 min, uint128 max);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function balanceOf(address account) external view returns (uint256);

    function collectPendingFees() external;

    function collectPlatformInterest()
        external
        returns (uint256 mintAmount, uint256 newSupply);

    function data()
        external
        view
        returns (
            uint256 swapFee,
            uint256 redemptionFee,
            uint256 govFee,
            uint256 pendingFees,
            uint256 cacheSize,
            AmpData memory ampData,
            WeightLimits memory weightLimits
        );

    function decimals() external view returns (uint8);

    function decreaseAllowance(address spender, uint256 subtractedValue)
        external
        returns (bool);

    function getBasset(address _bAsset)
        external
        view
        returns (BassetPersonal memory personal, WeightLimits memory vaultData);

    function getBassets()
        external
        view
        returns (BassetPersonal[] memory, WeightLimits[] memory vaultData);

    function getConfig() external view returns (FeederConfig memory config);

    function getMintMultiOutput(
        address[] memory _inputs,
        uint256[] memory _inputQuantities
    ) external view returns (uint256 mintOutput);

    function getMintOutput(address _input, uint256 _inputQuantity)
        external
        view
        returns (uint256 mintOutput);

    function getPrice() external view returns (uint256 price, uint256 k);

    function getRedeemExactBassetsOutput(
        address[] memory _outputs,
        uint256[] memory _outputQuantities
    ) external view returns (uint256 fpTokenQuantity);

    function getRedeemOutput(address _output, uint256 _fpTokenQuantity)
        external
        view
        returns (uint256 bAssetOutput);

    function getSwapOutput(
        address _input,
        address _output,
        uint256 _inputQuantity
    ) external view returns (uint256 swapOutput);

    function increaseAllowance(address spender, uint256 addedValue)
        external
        returns (bool);

    function initialize(
        string memory _nameArg,
        string memory _symbolArg,
        BassetPersonal memory _mAsset,
        BassetPersonal memory _fAsset,
        address[] memory _mpAssets,
        InvariantConfig memory _config
    ) external;

    function mAsset() external view returns (address);

    function migrateBassets(address[] memory _bAssets, address _newIntegration)
        external;

    function mint(
        address _input,
        uint256 _inputQuantity,
        uint256 _minOutputQuantity,
        address _recipient
    ) external returns (uint256 mintOutput);

    function mintMulti(
        address[] memory _inputs,
        uint256[] memory _inputQuantities,
        uint256 _minOutputQuantity,
        address _recipient
    ) external returns (uint256 mintOutput);

    function name() external view returns (string memory);

    function nexus() external view returns (address);

    function pause() external;

    function paused() external view returns (bool);

    function redeem(
        address _output,
        uint256 _fpTokenQuantity,
        uint256 _minOutputQuantity,
        address _recipient
    ) external returns (uint256 outputQuantity);

    function redeemExactBassets(
        address[] memory _outputs,
        uint256[] memory _outputQuantities,
        uint256 _maxInputQuantity,
        address _recipient
    ) external returns (uint256 fpTokenQuantity);

    function redeemProportionately(
        uint256 _inputQuantity,
        uint256[] memory _minOutputQuantities,
        address _recipient
    ) external returns (uint256[] memory outputQuantities);

    function setCacheSize(uint256 _cacheSize) external;

    function setFees(
        uint256 _swapFee,
        uint256 _redemptionFee,
        uint256 _govFee
    ) external;

    function setWeightLimits(uint128 _min, uint128 _max) external;

    function startRampA(uint256 _targetA, uint256 _rampEndTime) external;

    function stopRampA() external;

    function swap(
        address _input,
        address _output,
        uint256 _inputQuantity,
        uint256 _minOutputQuantity,
        address _recipient
    ) external returns (uint256 swapOutput);

    function symbol() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    function unpause() external;
}

struct AmpData {
    uint64 initialA;
    uint64 targetA;
    uint64 rampStartTime;
    uint64 rampEndTime;
}

struct WeightLimits {
    uint128 min;
    uint128 max;
}

struct BassetPersonal {
    address addr;
    address integrator;
    bool hasTxFee;
    uint8 status;
}

struct FeederConfig {
    uint256 supply;
    uint256 a;
    WeightLimits limits;
}

struct InvariantConfig {
    uint256 a;
    WeightLimits limits;
}
